[match:virtual_enum]
M1: """export namespace ErrorCodes {
        // Defined by JSON RPC
        export const ParseError: integer = -32700;
        export const InvalidRequest: integer = -32600;
        export const MethodNotFound: integer = -32601;
        export const InvalidParams: integer = -32602;
        export const InternalError: integer = -32603;
        export const jsonrpcReservedErrorRangeStart: integer = -32099;
    	export const serverErrorStart: integer = jsonrpcReservedErrorRangeStart;
        export const ServerNotInitialized: integer = -32002;
        export const UnknownErrorCode: integer = -32001;
	    export const jsonrpcReservedErrorRangeEnd = -32000;
	    export const serverErrorEnd: integer = jsonrpcReservedErrorRangeEnd;
	    export const lspReservedErrorRangeStart: integer = -32899;
	    export const ContentModified: integer = -32801;
	    export const RequestCancelled: integer = -32800;
	    export const lspReservedErrorRangeEnd: integer = -32800;
    }"""
M2: """export namespace DiagnosticSeverity {
            /**
             * Reports an error.
             */
            export const Error: 1 = 1;
            /**
             * Reports a warning.
             */
            export const Warning: 2 = 2;
            /**
             * Reports an information.
             */
            export const Information: 3 = 3;
            /**
             * Reports a hint.
             */
            export const Hint: 4 = 4;
        }"""
M3: """export namespace TokenFormat {
            export const Relative: 'relative' = 'relative';
        }"""
M4: """export namespace TextDocumentSyncKind {
            export const None = 0;
            export const Full = 1;
            export const Incremental = 2;
        }"""

[match:namespace]
M1: """export namespace tasks {
            export function registerTaskProvider(type: string, provider: TaskProvider): Disposable;
    		export function fetchTasks(filter?: TaskFilter): Thenable<Task[]>;
    		export function executeTask(task: Task): Thenable<TaskExecution>;
    		export const taskExecutions: readonly TaskExecution[];
    		export const onDidStartTask: Event<TaskStartEvent>;
    		export const onDidEndTask: Event<TaskEndEvent>;
    		export const onDidStartTaskProcess: Event<TaskProcessStartEvent>;
    		export const onDidEndTaskProcess: Event<TaskProcessEndEvent>;
    	}"""

[py:namespace]
M1: """
    class tasks:
        def registerTaskProvider(type: str, provider: 'TaskProvider') -> 'Disposable':
            pass

        def fetchTasks(filter: Optional['TaskFilter'] = None) -> Coroutine[List['Task']]:
            pass

        def executeTask(task: 'Task') -> Coroutine['TaskExecution']:
            pass
        taskExecutions: List['TaskExecution']
        onDidStartTask: 'Event[TaskStartEvent]'
        onDidEndTask: 'Event[TaskEndEvent]'
        onDidStartTaskProcess: 'Event[TaskProcessStartEvent]'
        onDidEndTaskProcess: 'Event[TaskProcessEndEvent]'
    """
